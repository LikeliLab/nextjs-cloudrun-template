name: 'Deploy to Cloud Run'
description: 'Build Docker image and deploy to Google Cloud Run'
author: 'Michael Ellis'

inputs:
  workload-identity-provider:
    description: 'Workload Identity Provider for authentication'
    required: true
  service-account:
    description: 'Service account email'
    required: true
  project-id:
    description: 'Google Cloud Project ID'
    required: true
  artifact-registry-repo:
    description: 'Artifact Registry repository name'
    required: true
  region:
    description: 'Google Cloud region'
    required: true
    default: 'us-central1'
  service-name:
    description: 'Cloud Run service name'
    required: true
    default: 'nextjs-app'
  environment:
    description: 'Environment name (dev/stage/production)'
    required: true
  memory:
    description: 'Memory allocation for Cloud Run service'
    required: false
    default: '512Mi'
  cpu:
    description: 'CPU allocation for Cloud Run service'
    required: false
    default: '1'
  min-instances:
    description: 'Minimum number of instances'
    required: false
    default: '0'
  max-instances:
    description: 'Maximum number of instances'
    required: false
    default: '10'
  enable-traffic-splitting:
    description: 'Enable gradual traffic splitting (for production)'
    required: false
    default: 'false'

outputs:
  service-url:
    description: 'The URL of the deployed Cloud Run service'
    value: ${{ steps.get-url.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.workload-identity-provider }}
        service_account: ${{ inputs.service-account }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ inputs.region }}-docker.pkg.dev
      shell: bash

    - name: Build and push Docker image
      run: |
        IMAGE_TAG="${{ inputs.region }}-docker.pkg.dev/${{ inputs.project-id }}/${{ inputs.artifact-registry-repo }}/${{ inputs.service-name }}:${{ github.sha }}"
        
        docker build \
          --tag $IMAGE_TAG \
          --build-arg NODE_ENV=production \
          .
        
        docker push $IMAGE_TAG
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      shell: bash

    - name: Deploy to Cloud Run (with traffic splitting)
      if: inputs.enable-traffic-splitting == 'true'
      run: |
        # Deploy without traffic
        gcloud run deploy ${{ inputs.service-name }} \
          --image ${{ env.IMAGE_TAG }} \
          --platform managed \
          --region ${{ inputs.region }} \
          --project ${{ inputs.project-id }} \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=production,ENVIRONMENT=${{ inputs.environment }}" \
          --memory=${{ inputs.memory }} \
          --cpu=${{ inputs.cpu }} \
          --min-instances=${{ inputs.min-instances }} \
          --max-instances=${{ inputs.max-instances }} \
          --timeout=300 \
          --port=3000 \
          --no-traffic

        # Get new revision
        NEW_REVISION=$(gcloud run revisions list \
          --service=${{ inputs.service-name }} \
          --region=${{ inputs.region }} \
          --project=${{ inputs.project-id }} \
          --format="value(metadata.name)" \
          --limit=1)
        
        echo "Deploying revision: $NEW_REVISION"
        
        # Gradual traffic shifting: 10% â†’ 50% â†’ 100%
        echo "ðŸš€ Starting gradual traffic shift..."
        
        gcloud run services update-traffic ${{ inputs.service-name }} \
          --to-revisions=$NEW_REVISION=10 \
          --region=${{ inputs.region }} \
          --project=${{ inputs.project-id }}
        echo "âœ… 10% traffic routed to new revision"
        
        sleep 30
        
        gcloud run services update-traffic ${{ inputs.service-name }} \
          --to-revisions=$NEW_REVISION=50 \
          --region=${{ inputs.region }} \
          --project=${{ inputs.project-id }}
        echo "âœ… 50% traffic routed to new revision"
        
        sleep 30
        
        gcloud run services update-traffic ${{ inputs.service-name }} \
          --to-revisions=$NEW_REVISION=100 \
          --region=${{ inputs.region }} \
          --project=${{ inputs.project-id }}
        echo "âœ… 100% traffic routed to new revision"
      shell: bash

    - name: Deploy to Cloud Run (direct)
      if: inputs.enable-traffic-splitting != 'true'
      run: |
        gcloud run deploy ${{ inputs.service-name }} \
          --image ${{ env.IMAGE_TAG }} \
          --platform managed \
          --region ${{ inputs.region }} \
          --project ${{ inputs.project-id }} \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=production,ENVIRONMENT=${{ inputs.environment }}" \
          --memory=${{ inputs.memory }} \
          --cpu=${{ inputs.cpu }} \
          --min-instances=${{ inputs.min-instances }} \
          --max-instances=${{ inputs.max-instances }} \
          --timeout=300 \
          --port=3000
      shell: bash

    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ inputs.service-name }} \
          --platform managed \
          --region ${{ inputs.region }} \
          --project ${{ inputs.project-id }} \
          --format 'value(status.url)')
        
        echo "ðŸš€ ${{ inputs.environment }} deployment successful!"
        echo "Service URL: $SERVICE_URL"
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "::notice title=Deployment Success::${{ inputs.environment }} environment deployed to $SERVICE_URL"
      shell: bash

    - name: Run health check
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ inputs.service-name }} \
          --platform managed \
          --region ${{ inputs.region }} \
          --project ${{ inputs.project-id }} \
          --format 'value(status.url)')
        
        echo "Running health check against $SERVICE_URL"
        curl -f "$SERVICE_URL" || exit 1
        echo "âœ… Health check passed"
      shell: bash